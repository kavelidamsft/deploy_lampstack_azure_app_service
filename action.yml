name: 'Deploy a Wordpress VM to Azure action'
description: 'This action helps create an Azure VM and deploy Wordpress on it'
branding:
  icon: 'play-circle'
  color: 'blue'
inputs:
  client-id:
    description: 'Client id to login to azure'
    required: true
  tenant-id:
    description: 'Tenant id to login to azure'
    required: true
  subscription-id:
    description: 'Subscription id to be used with your az login'
    required: true
  resource-group-name:
    description: 'Resource group to deploy your resources to'
    required: true
  admin-username:
    description: 'Admin username to login to vm'
    required: true
  admin-password:
    description: 'Admin password to login to vm'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Checkout master'
      uses: actions/checkout@v3
      
    - name: az cli login
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}
        enable-AzPSSession: false

    # - name: 'Accept Bitnami marketplace terms'
    #   shell: bash
    #   run: |
    #     az vm image terms accept --urn bitnami:wordpress:4-4:latest
        
    # - name: 'Az deploy - Wordpress on VM Bitnami'
    #   uses: azure/arm-deploy@v1
    #   with:
    #     subscriptionId: ${{ inputs.subscription-id }}
    #     resourceGroupName: ${{ inputs.resource-group-name }}
    #     template: https://raw.githubusercontent.com/vaibbavisk20/deploy_wordpress_vm_azure/main/vm_template.json
    #     parameters: https://raw.githubusercontent.com/vaibbavisk20/deploy_wordpress_vm_azure/main/vm_parameters.json
    #                 adminUsername=${{ inputs.admin-username }}
    #                 adminPassword=${{ inputs.admin-password }}
    #     failOnStdErr: false

    - name: 'Az deploy - LAMP on VM Bitnami'
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ inputs.subscription-id }}
        resourceGroupName: ${{ inputs.resource-group-name }}
        template: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/demos/lamp-app/azuredeploy.json
        parameters: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/demos/lamp-app/azuredeploy.parameters.json
                    mySqlPassword=${{ inputs.admin-password }}
                    adminPasswordOrKey=${{ inputs.admin-password }}
                    storageAccountNamePrefix=lampappsa
                    dnsLabelPrefix=dnslabelvm
                    adminUsername=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDThtLKxBDbR/DvU6+6nkJBZWcdh/dY8XY3sTO3UHn6q4p6QqxoTzE+umSmtFNU8UkLVyQ5WWLmci6xb3+7gkNfmrtIJoSyXrAVLOL6w6gzD0QVPUvGlm6fH/WzDreuxS7Dhn9NhszfXoQX3N5U4SQU22G3TdSe2QpkFKLUn9z9CWrWANbwqMJHNKfq5ANEcWLFNjBtoi9QnSYHxT6GpYkkelpkzQ4hzL8K2F/DdzUHGkGbVpuDj21Nn7DvKgdLUP5F4lh2DKEnjSBzoNKSMjC98zwazL+60ShY0GkA0SwQfPN5a1N3jpFqkZqt7b6UrPcat6IEJ4kxnf53MctMxYggX6//18OBStFFlxbWGNAdnfVwsP7GMH/OF9imMkqSUw5adeK59jZoriJ0kQw+scTzB1HDSglmf0IJoj23ALMP+zvIeWMoCOG2Vb24ImymxBQ+xNToKmWHYTwxQVLKkR+b9VBCN66o9FL+EEywUzGAPbBqj24vvJcsK7/TdnmId5U= vaibbavi sk@DESKTOP-ERTBP36
                    vmSize=Standard_D2as_v4
                  # adminUsername=${{inputs.admin-username}}

        failOnStdErr: false

    # - name: Fetch JSON file from remote repository
    #   shell: bash
    #   run: |
    #     json_url="https://raw.githubusercontent.com/vaibbavisk20/deploy_wordpress_vm_azure/main/vm_parameters.json"
    #     curl -sSLO $json_url

    # - name: Print parameter value
    #   shell: bash
    #   run: |
    #     json_file="vm_parameters.json"
    #     # vm name
    #     virtual_machine_name=".parameters.virtualMachineName.value"
    #     result=$(jq -r "$virtual_machine_name" "$json_file")
    #     echo "Virtual Machine Properties"
    #     echo "Name: $result"

    #     # region
    #     location=".parameters.location.value"
    #     result=$(jq -r "$location" "$json_file")
    #     echo "Location: $result"

    #     # vm size
    #     virtual_machine_size=".parameters.virtualMachineSize.value"
    #     result=$(jq -r "$virtual_machine_size" "$json_file")
    #     echo "VM Size: $result"
